import { NextPage } from 'next';
import Head from 'next/head';
import { Block } from '@/types/2048';
import { G2048Board } from '@/components/atoms/G2048Board';
import { G2048Score } from '@/components/atoms/G2048Score';
import {
  createBlocks, flick, flickLeft, flickRight,
} from '@/utils/2048';
import { useCallback, useEffect, useState } from 'react';
import { directions } from '@/constants/2048';

export const Page: NextPage = () => {
  const [turn, setTurn] = useState<number>(0);
  const [blocks, setBlocks] = useState<Block[]>([]);
  const [highScore, setHighScore] = useState<number>(0);

  const nextTurn = useCallback((nextBlocks: Block[]) => {
    if (JSON.stringify(nextBlocks) === JSON.stringify(blocks)) return;
    const next = [...createBlocks({
      turn,
      blocks: nextBlocks,
    })];
    setTurn(turn + 1);
    setBlocks(next);

    localStorage.setItem('2048', JSON.stringify({
      turn: turn + 1,
      blocks: next,
    }));
    const score = next.reduce((s, current) => s + current.number, 0);
    if (Number(localStorage.getItem('2048-highScore')) < score) {
      localStorage.setItem('2048-highScore', `${score}`);
    }
  }, [blocks, turn]);

  const onSwipeLeft = useCallback(() => {
    const nextBlocks = flick(directions.LEFT, blocks);
    nextTurn(nextBlocks);
  }, [blocks, nextTurn]);

  const onSwipeRight = useCallback(() => {
    const nextBlocks = flick(directions.RIGHT, blocks);
    nextTurn(nextBlocks);
  }, [blocks, nextTurn]);

  const onSwipeUp = useCallback(() => {
    const nextBlocks = flick(directions.UP, blocks);
    nextTurn(nextBlocks);
  }, [blocks, nextTurn]);

  const onSwipeDown = useCallback(() => {
    const nextBlocks = flick(directions.DOWN, blocks);
    nextTurn(nextBlocks);
  }, [blocks, nextTurn]);

  const refresh = () => {
    // eslint-disable-next-line no-alert
    if (window.confirm('やり直します。よろしいですか？')) {
      localStorage.removeItem('2048');
      setBlocks(createBlocks({}));
      setTurn(1);
    }
  };
  // Keyboard
  const onKeydown = useCallback((event: KeyboardEvent) => {
    if (event.key === 'ArrowRight') {
      onSwipeRight();
    }
    if (event.key === 'ArrowLeft') {
      onSwipeLeft();
    }
    if (event.key === 'ArrowUp') {
      onSwipeUp();
    }
    if (event.key === 'ArrowDown') {
      onSwipeDown();
    }
  }, [onSwipeDown, onSwipeLeft, onSwipeRight, onSwipeUp]);

  // onMount
  useEffect(() => {
    const storageData = localStorage.getItem('2048');
    const storageHighScore = localStorage.getItem('2048-highScore');
    if (storageData) {
      const data = JSON.parse(storageData);
      setBlocks(data.blocks);
      setTurn(data.turn);
    } else {
      setBlocks(createBlocks({}));
      setTurn(1);
    }
    setHighScore(Number(storageHighScore));
  }, []);

  // EventListener
  useEffect(() => {
    document.addEventListener('keydown', onKeydown, false);
    return () => {
      document.removeEventListener('keydown', onKeydown);
    };
  }, [onKeydown]);

  return (
    <>
      <Head>
        <title>Next.js and Socket.io Sandbox</title>
        <meta httpEquiv="Content-Security-Policy" content="default-src data: gap://* file://* https://ssl.gstatic.com *; img-src 'self' * data:; style-src 'self' 'unsafe-inline' *; script-src 'self' 'unsafe-eval' 'unsafe-inline' *; connect-src 'self' * ws://* wss://*;" />
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <>
        <style jsx global>
          {`
            html, body {
              height: 100%;
              width: 100%;
              overflow: auto;
              position: fixed;
            }
          `}
        </style>
      </>
      <G2048Score
        blocks={blocks}
        refresh={refresh}
        highScore={highScore}
      />
      <G2048Board
        blocks={blocks}
        onSwipeLeft={onSwipeLeft}
        onSwipeRight={onSwipeRight}
        onSwipeUp={onSwipeUp}
        onSwipeDown={onSwipeDown}
      />
    </>
  );
};

export default Page;
